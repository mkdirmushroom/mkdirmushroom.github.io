<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mushroom</title>
  <subtitle>Final maze</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuminmiao.com/"/>
  <updated>2017-03-13T14:51:57.289Z</updated>
  <id>http://wuminmiao.com/</id>
  
  <author>
    <name>Minmiao Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android RecyclerView的使用解析（完结篇）</title>
    <link href="http://wuminmiao.com/2016/10/19/android_recycle_view_test_end/"/>
    <id>http://wuminmiao.com/2016/10/19/android_recycle_view_test_end/</id>
    <published>2016-10-19T10:28:08.000Z</published>
    <updated>2017-03-13T14:51:57.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面两篇文章（<a href="http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/">Android RecyclerView的使用解析（一）</a>、<a href="http://wuminmiao.com/2016/10/16/android_recycle_view_test_02/">Android RecyclerView的使用解析（二）</a>）中，我们主要对RecyclerView作了简单的介绍并实现了它不同的布局效果，在本文中，我将对RecyclerView的动画机制和点击事件进行讲解。</p>
<h2 id="ItemAnimator"><a href="#ItemAnimator" class="headerlink" title="ItemAnimator"></a>ItemAnimator</h2><p>说到RecyclerView的动画机制，那我们就不得不提ItemAnimator这个类了，我们就<br>是依靠它来实现item的动画效果的。这个类仍然是个抽象类，不过Google给我们提供了一些实现类，我们也可以自定义它的实现类以显示更加炫酷的效果。网上有很多讲解该类的文章，这里我就不多作分析了。</p>
<h2 id="给item设置添加、删除动画"><a href="#给item设置添加、删除动画" class="headerlink" title="给item设置添加、删除动画"></a>给item设置添加、删除动画</h2><a id="more"></a>
<p>首先我们需要在菜单栏添加两个实现增加和删除item的按钮,打开menu文件夹下的布局文件，添加两个item项:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_add"</span></span></div><div class="line">         <span class="attr">android:title</span>=<span class="string">"ADD"</span></div><div class="line">         <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></div><div class="line">         <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_remove"</span></span></div><div class="line">         <span class="attr">android:title</span>=<span class="string">"REMOVE"</span></div><div class="line">         <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></div><div class="line">         <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>接着在TestAdapter中添加两个增加和删除item的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">       mDataset.add (pos, <span class="string">"Insert one"</span>);</div><div class="line">       notifyItemInserted (pos);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">       mDataset.remove (pos);</div><div class="line">       notifyItemRemoved (pos);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>然后在MainActivity的Oncreate方法中给RecyclerView设置一个默认的动画效果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.setItemAnimator (<span class="keyword">new</span> DefaultItemAnimator ());</div></pre></td></tr></table></figure></p>
<p>最后在onOptionsItemSelected方法中增加两个按钮的id：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> R.id.action_add:</div><div class="line">                mAdapter.addData (<span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.action_remove:</div><div class="line">                mAdapter.removeData (<span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>由于我们给瀑布流的布局设置了不同的activity，所以还需将以上代码添加到StaggeredGridActivity和StagggeredAdapter。</p>
<p>运行效果如下：<br><img src="http://oef7j4xoz.bkt.clouddn.com/ItemAnimator1.gif" alt="ItemAnimator"></p>
<p>额。。。虽然我们实现了添加和删除动画，但是每次都通过点击菜单选项来操作好像很繁琐耶，我们来优化一下呗。</p>
<p>我们可以给我们的demo增加一个ActionBar或ToolBar并把ADD和REMOVE按钮放在其上，为了方便，我这里使用的是ActionBar。修改代码，让MainActivty和StaggeredGridActivity继承自ActionBarActivity，接着修改values/styles.xml，将Theme指定为Theme.AppCompat.Light.DarkActionBar，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;item name="android:listDivider"&gt;@drawable/my_divider&lt;/item&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>重新运行程序，试试效果吧：<br><img src="http://oef7j4xoz.bkt.clouddn.com/ChagedItemAnimator1.gif" alt="ChagedItemAnimator"><br>嘿嘿，是不是方便多啦！</p>
<h2 id="添加OnClick监听"><a href="#添加OnClick监听" class="headerlink" title="添加OnClick监听"></a>添加OnClick监听</h2><p>熟悉ListView的人应该知道，ListView给我们提供了onItemClickListener之类的监听器，当我们点击item的时候，它会回调相关的方法，以便我们可以方便的处理item的点击事件。然而RecyclerView它丫的竟然没有对item提供任何相关的回调方法，太不负责任了！还能肿么办，只能我们自己去添加咯，谁叫人家是当大爷的命呢。</p>
<p>简单起见，我们可以在Adapter中为其添加,修改TestAdapter，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuminmiao.recycleviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wmm on 2016/10/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">TestAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">protected</span> List&lt;String&gt; mDataset;</div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line"></div><div class="line"><span class="comment">//    提供接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//    声明类型</span></div><div class="line">    <span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</div><div class="line"></div><div class="line"><span class="comment">//    提供它的set方法，供activity设置回调</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mOnItemClickListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//提供一个合适的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestAdapter</span><span class="params">(Context context, List&lt;String&gt; dataset)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        <span class="keyword">this</span>.mDataset = dataset;</div><div class="line">        mInflater = LayoutInflater.from (context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *将布局转换为View并传递给自定义的MyViewHolder</div><div class="line">     * <span class="doctag">@param</span> viewGroup</div><div class="line">     * <span class="doctag">@param</span> viewType</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = mInflater.inflate (R.layout.item, viewGroup, <span class="keyword">false</span>);</div><div class="line">        MyViewHolder viewHolder = <span class="keyword">new</span> MyViewHolder (view);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 建立起MyViewHolder中视图与数据的关联</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> MyViewHolder viewHolder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        viewHolder.mTextView.setText (mDataset.get (position));</div><div class="line">        setUpItemEvent (viewHolder);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//    设置item的回调</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUpItemEvent</span><span class="params">(<span class="keyword">final</span> MyViewHolder viewHolder)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            viewHolder.itemView.setOnClickListener (<span class="keyword">new</span> View.OnClickListener () &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> layoutPosition = viewHolder.getLayoutPosition ();</div><div class="line"></div><div class="line">                    mOnItemClickListener.onItemClick (viewHolder.itemView, layoutPosition);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            viewHolder.itemView.setOnLongClickListener (<span class="keyword">new</span> View.OnLongClickListener () &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> layoutPosition = viewHolder.getLayoutPosition ();</div><div class="line">                    mOnItemClickListener.onItemLongClick (viewHolder.itemView, layoutPosition);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取item的数目</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mDataset.size ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDataset.add (position, <span class="string">"Insert one"</span>);</div><div class="line">        notifyItemInserted (position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDataset.remove (position);</div><div class="line">        notifyItemRemoved (position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义的ViewHoder，持有item的所有控件</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">         TextView mTextView;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span> (view);</div><div class="line">            mTextView = (TextView) view.findViewById(R.id.text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，我们给适配器提供了一个OnItemClickListener的接口，里面封装了两个回调方法分别是onItemClick(点击)和onItemLongClick(长按)。接着提供setOnItemClickListener方法让activity可以去监听它的回调方法。最后在onBindViewHolder中设置这两个回调方法。</p>
<p>这样就可以在activity中去监听这两个回调方法啦，我们在onCreate方法中添加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mAdapter.setOnItemClickListener (<span class="keyword">new</span> TestAdapter.OnItemClickListener () &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              Toast.makeText (MainActivity.<span class="keyword">this</span>, <span class="string">"你点击了第"</span> + position + <span class="string">"个item"</span> ,</div><div class="line">                      Toast.LENGTH_SHORT).show ();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              mAdapter.removeData (position);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<p>代码很简单，当我们点击一个item时，会弹出一个Toast，而当我们长按一个item则会删除该item。</p>
<p>别忘了，我们的瀑布流布局与其他布局是不同的activity和adapter，我们还需要修改它们的代码。<br>StaggeredGridActivity中和MainActivity需要添加的代码是一样的，而StagggeredAdapter也可以继承我们的TestAdapter，保留其特有的属性和方法就行了，StagggeredAdapter修改后的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuminmiao.recycleviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wmm on 2016/10/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StagggeredAdapter</span> <span class="keyword">extends</span> <span class="title">TestAdapter</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; mHeight;</div><div class="line"></div><div class="line">    <span class="comment">//提供一个合适的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StagggeredAdapter</span><span class="params">(Context context, List&lt;String&gt; dataset)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, dataset);</div><div class="line"></div><div class="line">        mHeight = <span class="keyword">new</span> ArrayList&lt;Integer&gt; ();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDataset.size (); i++) &#123;</div><div class="line">            mHeight.add ((<span class="keyword">int</span>) (<span class="number">100</span> + Math.random ()*<span class="number">300</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 建立起MyViewHolder中视图与数据的关联</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span> <span class="params">(MyViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        viewHolder.mTextView.setText(mDataset.get (position));</div><div class="line">        ViewGroup.LayoutParams lp  = viewHolder.itemView.getLayoutParams ();</div><div class="line">        lp.height = mHeight.get (position);</div><div class="line">        viewHolder.itemView.setLayoutParams (lp);</div><div class="line"></div><div class="line">        setUpItemEvent (viewHolder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一点要注意的是，如果现在运行程序的话，当我们点击item时它的颜色是不会变化的，这样的用户体验肯定很差，我们需要给它优化一下。</p>
<p>首先，在drawable中新建一个xml文件，就叫做bg_item吧：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>  <span class="attr">android:drawable</span>=<span class="string">"@color/state_item_pressed"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>  <span class="attr">android:drawable</span>=<span class="string">"@color/state_item_normal"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着在values/colors.xml中指定其颜色：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"state_item_pressed"</span>&gt;</span>#728cd4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"state_item_normal"</span>&gt;</span>#add8e6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们给默认的item和点击后的item设置了不同的颜色，这样体验效果应该会好一点。</p>
<p>现在，就可以运行我们的程序啦，效果如下：<br><img src="http://oef7j4xoz.bkt.clouddn.com/OnClickEvent.gif" alt="OnClickEvent"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们首先给RecyclerView实现了item添加和删除的动画效果，除了系统默认的效果，我们也可以自定义一些更加炫酷的动画效果。当然，得益于伟大的开源世界，我们可以直接在前人种的树下乘凉，比如<a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">这里</a>,或者<a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators" target="_blank" rel="external">这里</a>。</p>
<p>接着我们又给RecylerView的item添加了OnClick监听，我们可以根据需求处理各式各样的点击事件。</p>
<p>那么到这里，我们的<strong>Android RecyclerView的使用解析</strong>系列就完结啦。虽然这个系列讲解得非常基础，但由于个人水平有限，仍然可能会出现一些错误，欢迎大家指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前面两篇文章（&lt;a href=&quot;http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/&quot;&gt;Android RecyclerView的使用解析（一）&lt;/a&gt;、&lt;a href=&quot;http://wuminmiao.com/2016/10/16/android_recycle_view_test_02/&quot;&gt;Android RecyclerView的使用解析（二）&lt;/a&gt;）中，我们主要对RecyclerView作了简单的介绍并实现了它不同的布局效果，在本文中，我将对RecyclerView的动画机制和点击事件进行讲解。&lt;/p&gt;
&lt;h2 id=&quot;ItemAnimator&quot;&gt;&lt;a href=&quot;#ItemAnimator&quot; class=&quot;headerlink&quot; title=&quot;ItemAnimator&quot;&gt;&lt;/a&gt;ItemAnimator&lt;/h2&gt;&lt;p&gt;说到RecyclerView的动画机制，那我们就不得不提ItemAnimator这个类了，我们就&lt;br&gt;是依靠它来实现item的动画效果的。这个类仍然是个抽象类，不过Google给我们提供了一些实现类，我们也可以自定义它的实现类以显示更加炫酷的效果。网上有很多讲解该类的文章，这里我就不多作分析了。&lt;/p&gt;
&lt;h2 id=&quot;给item设置添加、删除动画&quot;&gt;&lt;a href=&quot;#给item设置添加、删除动画&quot; class=&quot;headerlink&quot; title=&quot;给item设置添加、删除动画&quot;&gt;&lt;/a&gt;给item设置添加、删除动画&lt;/h2&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuminmiao.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://wuminmiao.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://wuminmiao.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView的使用解析（二）</title>
    <link href="http://wuminmiao.com/2016/10/16/android_recycle_view_test_02/"/>
    <id>http://wuminmiao.com/2016/10/16/android_recycle_view_test_02/</id>
    <published>2016-10-16T12:08:08.000Z</published>
    <updated>2017-03-13T14:51:57.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定制分隔线"><a href="#定制分隔线" class="headerlink" title="定制分隔线"></a>定制分隔线</h2><p>在<a href="http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/">上一篇文章</a>的学习中，我们对RecyclerView实现了一个ListView的效果，并给它设置了分割线，但是需要注意的是，这个分割线是默认的。当我们需要指定分割线的样式时，就需要来定制它了，那么怎样才能定制一个分割线样式呢？</p>
<p>首先，我们要知道默认的分割线资源是在哪里获取的。通过<a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators/blob/master/app/src/main/java/it/gmariotti/recyclerview/itemanimator/demo/adapter/DividerItemDecoration.java" target="_blank" rel="external">DividerItemDecoration</a>的源码，我发现它是通过获取系统Theme中的listDivider属性来实现自己的，那么如果我们要定制分割线，只需对这个属性进行修改即可。<br>下面我们来定制一个颜色渐变效果的分割线。在drawable文件夹中新建一个文件，就叫做my_divider吧：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"5dp"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:startColor</span>=<span class="string">"#00904a"</span> </span></div><div class="line">              <span class="attr">android:centerColor</span>=<span class="string">"#ec3e01"</span> </div><div class="line">              <span class="attr">android:endColor</span>=<span class="string">"#0089ff"</span></div><div class="line">              <span class="attr">android:type</span>=<span class="string">"linear"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>接着我们修改values文件夹下的style.xml，将listDivder指定为我们刚刚创建的drawable：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Holo.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:listDivider"</span>&gt;</span>@drawable/my_divider<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>重新运行程序，效果如下：<br><img src="http://oef7j4xoz.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161014165941.png" alt="my_divider"><br>当然，你也可以根据自己的需求定制不同的分隔线样式。</p>
<h2 id="变变变，变身GridView"><a href="#变变变，变身GridView" class="headerlink" title="变变变，变身GridView"></a>变变变，变身GridView</h2><p>大家或许已经察觉到利用RecyclerView来实现ListView的功能要比传统的ListView要来得复杂。这时你可能会有疑问了，既然它这么复杂你干嘛还要用它呢，你不是闲得蛋疼吗？<br>别急嘛，且听我慢慢道来，还记得前面提到过的<code>LayoutManager</code>吗？你可别小瞧它哦，我们可以利用它快速得转换布局样式。</p>
<p>首先我们设置一个菜单以便切换布局样式,在Mainactivity中复写onCreateOptionsMenu和onOptionsItemSelected方法，并在res/meun中新建一个meun：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.wuminmiao.recycleviewtest.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_listView"</span></span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"ListView"</span></div><div class="line">        <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_gridView"</span></span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"GridView"</span></div><div class="line">        <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_sta_gridView"</span></span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"@string/action_sta_gridView"</span></div><div class="line">        <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着修改MainActivity中onOptionsItemSelected的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (id) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.action_listView:</div><div class="line">                mRecyclerView.setLayoutManager (<span class="keyword">new</span> LinearLayoutManager (<span class="keyword">this</span>));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.action_gridView:</div><div class="line">                mRecyclerView.setLayoutManager (<span class="keyword">new</span> GridLayoutManager (<span class="keyword">this</span>, <span class="number">3</span>));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.action_sta_gridView:</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>重新运行程序，效果如下：</p>
<p><img src="http://oef7j4xoz.bkt.clouddn.com/recycleview_more_layout.gif" alt="recyclerview_more_layout"><br>可以看到我们GridView的效果顺利实现了呢，我们只需改变一行代码就可以从ListView快速得切换到GridView，是不是很方便呢？</p>
<p>不过大家可能也注意到了，GridView的分隔线只有水平方向有，而垂直方向却没有。这是因为我们定制的divider只绘制了item水平方向的分隔线，并没有绘制垂直方向的分隔线。为了更清晰的显示GridView，我们把MainActivity中设置分隔线的代码给注释掉：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mRecyclerView.addItemDecoration (new DividerItemDecoration (this,</span></div><div class="line"><span class="comment">//      DividerItemDecoration.VERTICAL_LIST));</span></div></pre></td></tr></table></figure></p>
<p>然后给item的布局文件设置一个margin:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">             <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">             <span class="attr">android:background</span>=<span class="string">"#add8e6"</span></div><div class="line">             <span class="attr">android:layout_margin</span>=<span class="string">"1dp"</span></div><div class="line">             <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在GridView的效果就完整的显示出来了：</p>
<p><img src="http://oef7j4xoz.bkt.clouddn.com/GridView.gif" alt="GridView"></p>
<h2 id="实现瀑布流效果"><a href="#实现瀑布流效果" class="headerlink" title="实现瀑布流效果"></a>实现瀑布流效果</h2><p>如果看了上面的效果你还是对RecyclerView不是很满意的话，那么接下来我相信它定会让你心服口服。<br>首先，为了不妨碍我们当前activity的显示效果，我们新建一个activity来显示瀑布流的效果，新建StaggeredGridLayoutActivity，这里我们只需对原有的MainActivity代码略微修改即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.StaggeredGridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaggeredGridActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> RecyclerView.Adapter mAdapter;</div><div class="line">    <span class="keyword">private</span> RecyclerView.LayoutManager mLayoutManager;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataset;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate (savedInstanceState);</div><div class="line">        setContentView (R.layout.activity_main);</div><div class="line">        initViews();</div><div class="line">        initData();</div><div class="line">        mLayoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager (<span class="number">3</span>,</div><div class="line">                StaggeredGridLayoutManager，.VERTICAL);<span class="comment">//将LayoutManger设为StaggeredGridLayoutManager，也就是瀑布流布局</span></div><div class="line">        mRecyclerView.setLayoutManager (mLayoutManager);<span class="comment">//设置布局管理器</span></div><div class="line">        mAdapter = <span class="keyword">new</span> StagggeredAdapter (<span class="keyword">this</span>, mDataset);<span class="comment">//将适配器设为等下新建的StagggeredAdapter</span></div><div class="line">        mRecyclerView.setAdapter (mAdapter);<span class="comment">//设置适配器</span></div><div class="line"><span class="comment">//        mRecyclerView.addItemDecoration (new DividerItemDecoration (this,</span></div><div class="line"><span class="comment">//                DividerItemDecoration.VERTICAL_LIST));</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRecyclerView = (RecyclerView) findViewById (R.id.test_recycle_view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDataset = <span class="keyword">new</span> ArrayList&lt;String&gt; ();</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++) &#123;</div><div class="line">            mDataset.add( <span class="string">"item"</span>+i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，这里我们只需把LayoutManger设置为StagggeredgridLayoutManager，并把adapter指定为即将创建的StagggeredAdapter，最后把不必要的onOptionsItemSelected方法删除即可。</p>
<p>那么，接下来我们来创建StagggeredAdapter，同样，我们只需在之前TestAdapter代码的基础上略作修改便可，StagggeredAdapter代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wuminmiao on 2016/10/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StagggeredAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">StagggeredAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataset;</div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; mHeight;</div><div class="line"></div><div class="line">    <span class="comment">//提供一个合适的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StagggeredAdapter</span><span class="params">(Context context, List&lt;String&gt; dataset)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        <span class="keyword">this</span>.mDataset = dataset;</div><div class="line">        mInflater = LayoutInflater.from (context);</div><div class="line"></div><div class="line">        mHeight = <span class="keyword">new</span> ArrayList&lt;Integer&gt; ();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDataset.size (); i++) &#123;</div><div class="line">            mHeight.add ((<span class="keyword">int</span>) (<span class="number">100</span> + Math.random ()*<span class="number">300</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *创建ViewHolder</div><div class="line">     * <span class="doctag">@param</span> viewGroup</div><div class="line">     * <span class="doctag">@param</span> viewType</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = mInflater.inflate (R.layout.item, viewGroup, <span class="keyword">false</span>);</div><div class="line">        MyViewHolder viewHolder = <span class="keyword">new</span> MyViewHolder (view);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 建立起MyViewHolder中视图与数据的关联</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        viewHolder.mTextView.setText(mDataset.get (position));</div><div class="line">        ViewGroup.LayoutParams lp  = viewHolder.itemView.getLayoutParams ();</div><div class="line">        lp.height = mHeight.get (position);</div><div class="line">        viewHolder.itemView.setLayoutParams (lp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取item的数目</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mDataset.size ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义的ViewHoder，持有item的所有控件</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">         TextView mTextView;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span> (view);</div><div class="line">            mTextView = (TextView) view.findViewById(R.id.text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这段代码中，我们主要想实现的是给每个item设置一个随机的高度。</p>
<p>首先定义一个成员变量mHeight，然后在构造方法中对它初始化，利用Math.random方法让它产生一些随机数。接着在onBindViewHolder方法中把刚刚得到的mHeight数据绑定到布局参数中并交由viewHolder处理，以实现设置item高度的目的。</p>
<p>最后在MainActivity中菜单的item中利用Intent打开StaggeredGridLayoutActivity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> R.id.action_sta_gridView:</div><div class="line">              Intent intent = <span class="keyword">new</span> Intent (<span class="keyword">this</span>, StaggeredGridActivity.class);</div><div class="line">              startActivity (intent);</div><div class="line">              <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>最后的最后，别忘了，在manifest中对StaggeredGridLayoutActivity进行注册。</p>
<p>来看看成果吧：</p>
<p><img src="http://oef7j4xoz.bkt.clouddn.com/StaggeredGridView.gif" alt="StaggeredGridView"><br>Bingo，我们顺利地实现了瀑布流的效果，是不是很简单啊！</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>OK，我们来回顾一下本文的主要内容。首先，我们对RecyclerView的自定义分割线进行了讲解，在这里，我们巧妙的运用了系统的listDivider资源来实现分隔线的定制。以后的学习中，我们亦要延续这样的思维方式，以达到化繁为简的目的。接着，我们快速实现了RecyclerView的布局转换，这也是RecyclerView一大特色，我们可以方便地实现网格效果和瀑布流效果，这是ListView所不具备的。</p>
<p>在下篇文章中，我将对RecylerView添加动画效果和点击事件进行详解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定制分隔线&quot;&gt;&lt;a href=&quot;#定制分隔线&quot; class=&quot;headerlink&quot; title=&quot;定制分隔线&quot;&gt;&lt;/a&gt;定制分隔线&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/&quot;&gt;上一篇文章&lt;/a&gt;的学习中，我们对RecyclerView实现了一个ListView的效果，并给它设置了分割线，但是需要注意的是，这个分割线是默认的。当我们需要指定分割线的样式时，就需要来定制它了，那么怎样才能定制一个分割线样式呢？&lt;/p&gt;
&lt;p&gt;首先，我们要知道默认的分割线资源是在哪里获取的。通过&lt;a href=&quot;https://github.com/gabrielemariotti/RecyclerViewItemAnimators/blob/master/app/src/main/java/it/gmariotti/recyclerview/itemanimator/demo/adapter/DividerItemDecoration.java&quot;&gt;DividerItemDecoration&lt;/a&gt;的源码，我发现它是通过获取系统Theme中的listDivider属性来实现自己的，那么如果我们要定制分割线，只需对这个属性进行修改即可。&lt;br&gt;下面我们来定制一个颜色渐变效果的分割线。在drawable文件夹中新建一个文件，就叫做my_divider吧：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:shape&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rectangle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5dp&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:startColor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#00904a&quot;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;android:centerColor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#ec3e01&quot;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;android:endColor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#0089ff&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;android:type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;linear&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shape&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuminmiao.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://wuminmiao.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://wuminmiao.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView的使用解析（一）</title>
    <link href="http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/"/>
    <id>http://wuminmiao.com/2016/10/13/android_recycle_view_test_01/</id>
    <published>2016-10-13T14:47:08.000Z</published>
    <updated>2017-03-13T14:51:57.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RecyclerView是Android5.0带来的一个旨在替代ListView的新控件，收录在android.support.v7.widget包下。转眼之间，它已经面世2年了，大家也或多或少了解或运用过这个吊吊的控件，下面就由我带领您走向RecyclerView的世界。</p>
<h2 id="初识RecyclerView"><a href="#初识RecyclerView" class="headerlink" title="初识RecyclerView"></a>初识RecyclerView</h2><p>我们先来看看这个控件的名字，所谓RecyclerView，意思就是老子只负责回收复用View，其它的事不管。看它趾高气扬的样子，你是不是想弄死它？其实啊，人家确实有装B的资格，相比较ListView而言，我们可以更加灵活地定制控件的效果。<br>要使用RecyclerView，首先需要了解以下两个相关的类：<br><a id="more"></a></p>
<ul>
<li><code>LayoutManager</code></li>
</ul>
<p>这个类主要用于控制RecyclerView的显示规则的，它是一个抽象类，系统给我们提供了三个默认的实现类，它们是<code>LinearLayoutManager</code> 、 <code>GridLayoutManager</code>和<code>StaggeredGridLayoutManager</code>。<br>从名字就可以看出，我们可以利用它们分别让RecyclerView显示线性布局，网格布局和瀑布流布局。</p>
<ul>
<li><code>RecyclerView.Adapter</code></li>
</ul>
<p>同ListView一样，RecyclerView也提供一个适配器来控制每个item的显示内容。我们需要继承<code>RecyclerView.Adapter&lt;VH extends VeiwHolder&gt;</code>，并将泛型中的类名指定为自定义的<code>ViewHolder</code>类名，接着创建一个静态的自定义<code>ViewHolder</code>（RecyclerView帮我们封装好了ViewHolder，我们只需要在它的基础上实现功能即可），然后复写以下三个方法：</p>
<ul>
<li><p><code>onCreateViewHolder</code><br>该方法主要为每一个item加载布局，并将布局传递给自定义的<code>ViewHolder</code>。</p>
</li>
<li><p><code>onBindViewHolder</code><br>该方法主要是建立起自定义<code>ViewHolder</code>中视图与数据的关联。</p>
</li>
<li><p><code>getItemCount</code><br>该方法用于对item进行计数。</p>
</li>
</ul>
<h2 id="简单的实现"><a href="#简单的实现" class="headerlink" title="简单的实现"></a>简单的实现</h2><p>废话不多说，下面我们来进入实战，首先我们要实现一个ListView显示item项的效果。</p>
<p>在AS中新建一个项目，我们这里就叫做RecyclerViewTest吧，添加以下依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...<span class="comment">//其它依赖</span></div><div class="line">    compile <span class="string">'com.android.support:recyclerview-v7:24.2.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着在布局文件中创建我们的RecyclerView布局：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.wuminmiao.recycleviewtest.MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>并创建item的布局：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#add8e6"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在MainActivity的onCreate方法中获取RecyclerView的实例，并且为它设置适配器Adapter和布局管理器LayoutManager。<code>MainActivity</code>的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> RecyclerView.Adapter mAdapter;</div><div class="line">    <span class="keyword">private</span> RecyclerView.LayoutManager mLayoutManager;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataset;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate (savedInstanceState);</div><div class="line">        setContentView (R.layout.activity_main);</div><div class="line">        initViews();</div><div class="line">        initData();</div><div class="line">        mLayoutManager = <span class="keyword">new</span> LinearLayoutManager (<span class="keyword">this</span>,</div><div class="line">                LinearLayoutManager.VERTICAL, <span class="keyword">false</span>);<span class="comment">//这里我们使用默认的线性布局管理器,将其设为垂直显示</span></div><div class="line">        mRecyclerView.setLayoutManager (mLayoutManager);<span class="comment">//设置布局管理器</span></div><div class="line">        mAdapter = <span class="keyword">new</span> TestAdapter(<span class="keyword">this</span>, mDataset);<span class="comment">//实例化适配器</span></div><div class="line">        mRecyclerView.setAdapter (mAdapter);<span class="comment">//设置适配器</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRecyclerView = (RecyclerView) findViewById (R.id.test_recycle_view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDataset = <span class="keyword">new</span> ArrayList&lt;String&gt; ();</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++) &#123;</div><div class="line">            mDataset.add( <span class="string">"item"</span>+i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们就要创建自定义Adapter了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wuminmiao on 2016/10/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">TestAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataset;</div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//提供一个合适的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestAdapter</span><span class="params">(Context context, List&lt;String&gt; dataset)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        <span class="keyword">this</span>.mDataset = dataset;</div><div class="line">        mInflater = LayoutInflater.from (context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *将布局转换为View并传递给自定义的MyViewHolder</div><div class="line">     * <span class="doctag">@param</span> viewGroup</div><div class="line">     * <span class="doctag">@param</span> viewType</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = mInflater.inflate (R.layout.item, viewGroup, <span class="keyword">false</span>);</div><div class="line">        MyViewHolder viewHolder = <span class="keyword">new</span> MyViewHolder (view);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 建立起MyViewHolder中视图与数据的关联</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        viewHolder.mTextView.setText(mDataset.get (position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取item的数目</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mDataset.size ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义的ViewHoder，持有item的所有控件</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">         TextView mTextView;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span> (view);</div><div class="line">            mTextView = (TextView) view.findViewById(R.id.text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，我们这个例子就可以正常运行了，效果如下：<br><img src="http://oef7j4xoz.bkt.clouddn.com/recycleview.gif" alt="RecyclerView4ListView"><br>恩？好像哪里不对！分割线哪里去了？以前用ListView时，我们还可以通过divider属性来设置分割线，但到了RecyclerView这却不行了。这位大爷除了回收复用外啥事都不管，什么设置分割线啊，给item设置动画效果啊等等它丫的统统抛在脑后！那是不是就没辙了？肯定不是啦，前面我们就说过，我们可以自由地定制RecyclerView，那分割线这点芝麻大的事肯定也不在话下啦。</p>
<p>系统给我们提供了一个叫做<code>ItemDecoration</code>的抽象类，却并没有提供它的实现类供我们使用，所以我们必须通过自定义它去使用它，这里我就不重复造轮子啦，网上有很多现成的<code>ItemDecoration</code>的实现类，我们挑一个比较好用的来实现分割线效果:<br>在我们的项目中添加<a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators/blob/master/app/src/main/java/it/gmariotti/recyclerview/itemanimator/demo/adapter/DividerItemDecoration.java" target="_blank" rel="external">DividerItemDecoration</a>，该类的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            android.R.attr.listDivider</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">        setOrientation(orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid orientation"</span>);</div><div class="line">        &#125;</div><div class="line">        mOrientation = orientation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            drawVertical(c, parent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawHorizontal(c, parent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们只需要在MainActivity的onCreate方法中添加如下代码即可添加分隔线了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addItemDecoration (<span class="keyword">new</span> DividerItemDecoration (<span class="keyword">this</span>,</div><div class="line">               DividerItemDecoration.VERTICAL_LIST));</div></pre></td></tr></table></figure></p>
<p>运行程序，效果如下：<br><img src="http://oef7j4xoz.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161013223914.png" alt="test"><br>由于原来的背景颜色太淡导致分隔线显示不明显，所以我换了一个背景色。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章里，我们对RecyclerView有了一个基本的认识并实现了它的一个简单用法，在接下来的几篇博文里，我将给您带来RecyclerView的更多用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;RecyclerView是Android5.0带来的一个旨在替代ListView的新控件，收录在android.support.v7.widget包下。转眼之间，它已经面世2年了，大家也或多或少了解或运用过这个吊吊的控件，下面就由我带领您走向RecyclerView的世界。&lt;/p&gt;
&lt;h2 id=&quot;初识RecyclerView&quot;&gt;&lt;a href=&quot;#初识RecyclerView&quot; class=&quot;headerlink&quot; title=&quot;初识RecyclerView&quot;&gt;&lt;/a&gt;初识RecyclerView&lt;/h2&gt;&lt;p&gt;我们先来看看这个控件的名字，所谓RecyclerView，意思就是老子只负责回收复用View，其它的事不管。看它趾高气扬的样子，你是不是想弄死它？其实啊，人家确实有装B的资格，相比较ListView而言，我们可以更加灵活地定制控件的效果。&lt;br&gt;要使用RecyclerView，首先需要了解以下两个相关的类：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuminmiao.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://wuminmiao.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://wuminmiao.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Java复习笔记之对象导论（一）</title>
    <link href="http://wuminmiao.com/2016/10/09/java_notes_01/"/>
    <id>http://wuminmiao.com/2016/10/09/java_notes_01/</id>
    <published>2016-10-09T14:32:08.000Z</published>
    <updated>2017-03-13T14:51:57.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在android的学习过程中，我时常感到自己的Java基础掌握的不够牢靠，极大地拉低了android开发的效率，所以我准备花费一段时间系统地复习一下Java。这次复习的参考书籍是大名鼎鼎的<a href="https://book.douban.com/subject/1313042/" target="_blank" rel="external">《Java编程思想》</a>。</p>
<h2 id="抽象过程"><a href="#抽象过程" class="headerlink" title="抽象过程"></a>抽象过程</h2><p>所有的编程语言都有抽象机制，那么到底什么是抽象呢，维基百科上的解释是这样的：</p>
<blockquote>
<p>抽象就是把一个问题或模型，以不同规则或方法所得出的不同的解（求解方法和解本身即抽象层），这些不同的解可以组合并还原成问题或模型的本身。</p>
</blockquote>
<p>人们所解决问题的复杂度取决于该问题的抽象的类型和质量，所谓的类型是指<strong>“所抽象的是什么”</strong>。比如汇编语言是对计算机底层的轻微抽象；C等“命令式“语言则是针对汇编语言进行抽象，这些语言虽然在汇编语言的基础上有了很大的改进，但是本质上它们所作的主要抽象仍要求在解决问题时要基于计算机的结构，而不是基于所要解决问题的结构去考虑。<br><a id="more"></a></p>
<p><em>程序员要做的是让机器模型（位于”解空间“内，即问题建模的地方，比如我们的计算机）和实际待解决问题的模型（位于”问题空间内“，即问题存在的地方，比如一些业务）建立起关联。而这个关联的过程就是编程。</em></p>
<p>编程方式众多，面向对象的方式便是其中之一。这种表示方式非常通用，它使我们不用受限于任何特定类型的问题。我们把问题空间中的元素以及其在解空间的表示称为<strong>“对象”</strong>。这种思想的实质是：<strong>程序可以通过添加新类型的对象使自身适用于每个特定问题。</strong>也就是说，我们在阅读解决问题的代码的同时也在阅读问题的描述。这种语言抽象相比较其他语言更加的灵活和强有力。所以<strong>OOP（面向对象程序设计）</strong>允许根据问题描述问题，而不是以往的根据允许解决方案的计算机来解决。<strong>每个对象就像是一个微型计算机，它既有状态，又有操作，用户可以要求对象执行这些操作。拿现实世界的对象作类比的话，那么说它们都具有特性和行为似乎不错。</strong></p>
<h3 id="面象对象语言的五个基本特性"><a href="#面象对象语言的五个基本特性" class="headerlink" title="面象对象语言的五个基本特性"></a>面象对象语言的五个基本特性</h3><ul>
<li><strong>万物皆为对象</strong><br>对象可以视为一个奇特的变量，他可以存储数据，也可以要求它对自身执行操作。理论上讲，我们可以抽取待解决问题的任何概念化构件（人、狗、建筑物、服务等）将其表示为程序里的对象。</li>
<li><strong>程序是对象的集合，它们可以通过发送消息来告知彼此所要做的</strong><br>要想请求一个对象，就必须对该对象发送一条消息，更具体点说，可以把消息想象为对某个特定对象的调用请求。</li>
<li><strong>每个对象都有自己的由其他对象所构成的存储</strong><br>换句话说，可以通过创建包含现有对象的包的方式来创建新类型的对象。因此，可以在程序中构件复杂的体系，同时将其复杂性隐藏在对象的简单性背后。</li>
<li><strong>每个对象都拥有其类型</strong><br>按照通用的说法，“每个对象都是某个类(class)的一个实例(instance)”，这里的”类“就是”类型“的同义词。每个类最重要的区别于其他类的特性就是”可以发送什么样的消息给它“。</li>
<li><strong>某个特定类型的所有对象都可以接受同样的消息</strong><br>比如一个”圆形“类型的对象同时也是”几何形“类型的对象，所以一个”圆形“对象必定能够接受发送给”几何形“对象的消息。这种可替代性(substitutability)是OOP中最强有力的概念之一。<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><em>对象具有状态、行为和标识。这意味着每一个对象都可以拥有内部数据（它们给出了对象的状态）和方法（它们产生行为），而且每一个对象都可以唯一地与其他对象区分开来（比如我们可以区分人与人之间的不同）。</em></li>
</ul>
<h2 id="每个对象都有一个接口"><a href="#每个对象都有一个接口" class="headerlink" title="每个对象都有一个接口"></a>每个对象都有一个接口</h2><p><a href="http://baike.baidu.com/link?url=m2JLgAZTTdGY0zWehMWYAZh8j6eKXtX0mRelzgj7EA-4BjtNv4yBI_xSH4pOmmLyPPjGtYrcRPnwIh8Ty0toEu2KWNzRCvTASoOmJNbKfvnSFwF7VPkfExbXG2Fm3dbOzNQ2GDn2l-s83w2SYQxd-_" target="_blank" rel="external">亚里士多德</a>可能是第一个深入研究<strong>类型(type)</strong>的哲学家，他曾提出鱼类和鸟类这样的概念。所有的对象都是唯一的，但同时是具有相同特性和行为的对象所归属的类的一部分。</p>
<p>创建抽象数据类型（类）是OOP的基本概念之一。抽象数据类型的运行方式和内置(built-in)类型几乎完全一致：你可以创建某一类型的对象（或者叫做实例），然后操作这些对象（发送消息或请求；发送消息，对象就知道要做什么）。</p>
<p>每个类的成员或元素<strong>都具有某种共性</strong>（比如每个人都有名字，每只狗都会“汪汪”叫），同时每个成员<strong>都有其自身的状态</strong>（比如他叫张三，我叫李四；这只狗叫旺财，那只狗叫小黑）。因此诸如人和狗等都可以在计算机程序中被表示为唯一的实体。这些实体就是对象，<strong>每个对象都属于定义了特性和行为的每个特定的类。</strong></p>
<p>所以，尽管我们在OOP中实际上进行的是创建新的数据类型，但事实上所有的OOP语言都是用class这个关键字来表示数据类型。当看到类型一词时，可将其作为类来考虑，反之亦然。</p>
<p>因为类描述了具有相同特性（数据元素）和行为（功能）的对象集合，所以<strong>一个类实际上就是一个数据类型</strong>。程序员可以通过定义类来适应问题，而不再被迫使用现有的用来表示机器中的存储单元的数据类型，可以根据需求，通过增加新的数据类型来扩展编程语言，而编程系统欣然接受新的类，并且像对待内置类型一样地照管它们和进行类型检查。</p>
<p>如何才能获得有用的对象呢？必须有某种方式产生对对象的请求，使对象完成各种任务，如完成一笔交易，打开一个开关，在屏幕上画图等等。每个对象都只能满足某些请求，这些请求由对象的<strong>接口(interface)</strong>定义，决定接口的便是类型。</p>
<p><strong>接口确定了对某一特定对象所能发出的请求。</strong>但是，在程序中必须有满足这些请求的代码，这些代码与隐藏的数据一起构成了实现。在类型中，每一个可能的请求都有一个方法与之相关联，当对象发送请求时，与之相关联的方法就会被调用。此过程通常被概括为：向某个对象“发送消息”（产生请求），这个对象便知道此消息的目的，然后执行对应的程序代码。以电灯泡为例做一个简单的比喻（下图所示）：<br><img src="http://oef7j4xoz.bkt.clouddn.com/light.png" alt="UML图"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Light lt = <span class="keyword">new</span> Light();</div><div class="line">lt.on();</div></pre></td></tr></table></figure></p>
<p>上例中，类型/类的名称是Light，特定的Light对象的名称是lt，可以向Light对象发出的请求是：打开它、关闭它、将它调亮、将它调暗。以下列方式创建了一个Light对象：定义一个对象的“引用”(<strong>lt</strong>),然后调用<strong>new</strong>方法来创建该类型的新对象。为了向对象发送消息，需要声明对象的名称，并以英文句号连接一个消息请求。从预定义类的用户观点来看，这些差不多就是用对象进行设计的全部。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在android的学习过程中，我时常感到自己的Java基础掌握的不够牢靠，极大地拉低了android开发的效率，所以我准备花费一段时间系统地复习一下Java。这次复习的参考书籍是大名鼎鼎的&lt;a href=&quot;https://book.douban.com/subject/1313042/&quot;&gt;《Java编程思想》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;抽象过程&quot;&gt;&lt;a href=&quot;#抽象过程&quot; class=&quot;headerlink&quot; title=&quot;抽象过程&quot;&gt;&lt;/a&gt;抽象过程&lt;/h2&gt;&lt;p&gt;所有的编程语言都有抽象机制，那么到底什么是抽象呢，维基百科上的解释是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象就是把一个问题或模型，以不同规则或方法所得出的不同的解（求解方法和解本身即抽象层），这些不同的解可以组合并还原成问题或模型的本身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们所解决问题的复杂度取决于该问题的抽象的类型和质量，所谓的类型是指&lt;strong&gt;“所抽象的是什么”&lt;/strong&gt;。比如汇编语言是对计算机底层的轻微抽象；C等“命令式“语言则是针对汇编语言进行抽象，这些语言虽然在汇编语言的基础上有了很大的改进，但是本质上它们所作的主要抽象仍要求在解决问题时要基于计算机的结构，而不是基于所要解决问题的结构去考虑。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://wuminmiao.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://wuminmiao.com/tags/Java/"/>
    
      <category term="面向对象" scheme="http://wuminmiao.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>我的博客上线了</title>
    <link href="http://wuminmiao.com/2016/10/01/my_blog/"/>
    <id>http://wuminmiao.com/2016/10/01/my_blog/</id>
    <published>2016-10-01T12:08:08.000Z</published>
    <updated>2017-03-13T14:51:57.293Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="博客结构"><a href="#博客结构" class="headerlink" title="博客结构"></a>博客结构</h2><ul>
<li>基于:<a href="https://pages.github.com" target="_blank" rel="external">Github Pages</a> &amp; <a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="external">Coding Pages</a></li>
<li>框架:<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Hexo</a></li>
<li>主题:<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">nexT</a></li>
</ul>
<a id="more"></a>
<hr>
<h2 id="构建目的"><a href="#构建目的" class="headerlink" title="构建目的"></a>构建目的</h2><ul>
<li>记录&amp;沉淀</li>
<li>交流学习</li>
<li>便于管理</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;博客结构&quot;&gt;&lt;a href=&quot;#博客结构&quot; class=&quot;headerlink&quot; title=&quot;博客结构&quot;&gt;&lt;/a&gt;博客结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于:&lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://coding.net/help/doc/pages/index.html&quot;&gt;Coding Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;框架:&lt;a href=&quot;https://github.com/hexojs/hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主题:&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;nexT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://wuminmiao.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="博客" scheme="http://wuminmiao.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://wuminmiao.com/tags/Hexo/"/>
    
      <category term="nexT" scheme="http://wuminmiao.com/tags/nexT/"/>
    
  </entry>
  
</feed>
